# [PackageDev] target_format: plist, ext: tmLanguage
fileTypes:
- xtpl
- tpl
- html
- htm
name: Xtemplate
scopeName: source.xtpl
uuid: d9776d5a-afa4-4016-8c8e-ffbe386edb58
patterns:
- include: '#block_helper'
- include: '#end_block'
- include: '#partial_and_var'
- include: '#entities'
- include: '#comments'
- include: '#embedded-code'

- name: meta.tag.any.html
  begin: (<)([a-zA-Z0-9:]+)(?=[^>]*></\2>)
  beginCaptures:
    '1': {name: punctuation.definition.tag.begin.html}
    '2': {name: entity.name.tag.html}
  end: (>)(<)(/)(\2)(>)
  endCaptures:
    '1': {name: punctuation.definition.tag.end.html}
    '2': {name: punctuation.definition.tag.begin.html meta.scope.between-tag-pair.html}
    '3': {name: punctuation.definition.tag.begin.html}
    '4': {name: entity.name.tag.html}
    '5': {name: punctuation.definition.tag.end.html}
  patterns:
  - include: '#tag-stuff'

- name: meta.tag.preprocessor.xml.html
  begin: (<\?)(xml)
  end: (\?>)
  captures:
    '1': {name: punctuation.definition.tag.html}
    '2': {name: entity.name.tag.xml.html}
  patterns:
  - include: '#tag-generic-attribute'
  - include: '#string-double-quoted'
  - include: '#string-single-quoted'

- name: comment.block.html
  begin: <!--
  end: --\s*>
  captures:
    '0': {name: punctuation.definition.comment.html}
  patterns:
  - name: invalid.illegal.bad-comments-or-CDATA.html
    match: --
  - include: '#embedded-code'

- name: meta.tag.sgml.html
  begin: <!
  end: '>'
  captures:
    '0': {name: punctuation.definition.tag.html}
  patterns:
  - name: meta.tag.sgml.doctype.html
    begin: (DOCTYPE|doctype)
    end: (?=>)
    captures:
      '1': {name: entity.name.tag.doctype.html}
    patterns:
    - name: string.quoted.double.doctype.identifiers-and-DTDs.html
      match: '"[^">]*"'
  - name: constant.other.inline-data.html
    begin: \[CDATA\[
    end: ']](?=>)'
  - name: invalid.illegal.bad-comments-or-CDATA.html
    match: (\s*)(?!--|>)\S(\s*)

- name: source.css.embedded.html
  begin: (?:^\s+)?(<)((?i:style))\b(?![^>]*/>)
  end: (</)((?i:style))(>)(?:\s*\n)?
  captures:
    '1': {name: punctuation.definition.tag.begin.html}
    '2': {name: entity.name.tag.style.html}
    '3': {name: punctuation.definition.tag.html}
  patterns:
  - include: '#tag-stuff'
  - begin: (>)
    beginCaptures:
      '1': {name: punctuation.definition.tag.end.html}
    end: (?=</(?i:style))
    patterns:
    - include: '#embedded-code'
    - include: source.css

- name: source.js.embedded.html
  begin: (?:^\s+)?(<)((?i:script))\b(?![^>]*/>)
  beginCaptures:
    '1': {name: punctuation.definition.tag.begin.html}
    '2': {name: entity.name.tag.script.html}
  end: (?<=</(script|SCRIPT))(>)(?:\s*\n)?
  endCaptures:
    '2': {name: punctuation.definition.tag.html}
  patterns:
  - include: '#tag-stuff'
  - begin: (?<!</(?:script|SCRIPT))(>)
    end: (</)((?i:script))
    captures:
      '1': {name: punctuation.definition.tag.begin.html}
      '2': {name: entity.name.tag.script.html}
    patterns:
    - name: comment.line.double-slash.js
      match: (//).*?((?=</script)|$\n?)
      captures:
        '1': {name: punctuation.definition.comment.js}
    - name: comment.block.js
      begin: /\*
      end: \*/|(?=</script)
      captures:
        '0': {name: punctuation.definition.comment.js}
    - include: '#php'
    - include: source.js

- name: meta.tag.structure.any.html
  begin: (</?)((?i:body|head|html)\b)
  end: (>)
  endCaptures:
    '1': {name: punctuation.definition.tag.end.html}
  captures:
    '1': {name: punctuation.definition.tag.begin.html}
    '2': {name: entity.name.tag.structure.any.html}
  patterns:
  - include: '#tag-stuff'

- name: meta.tag.block.any.html
  begin: (</?)((?i:address|blockquote|dd|div|header|section|footer|aside|nav|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|menu|pre)\b)
  beginCaptures:
    '1': {name: punctuation.definition.tag.begin.html}
    '2': {name: entity.name.tag.block.any.html}
  end: (>)
  endCaptures:
    '1': {name: punctuation.definition.tag.end.html}
  patterns:
  - include: '#tag-stuff'

- name: meta.tag.inline.any.html
  begin: (</?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var|wbr)\b)
  beginCaptures:
    '1': {name: punctuation.definition.tag.begin.html}
    '2': {name: entity.name.tag.inline.any.html}
  end: '((?: ?/)?>)'
  endCaptures:
    '1': {name: punctuation.definition.tag.end.html}
  patterns:
  - include: '#tag-stuff'

- name: meta.tag.other.html
  begin: (</?)([a-zA-Z0-9:]+)
  beginCaptures:
    '1': {name: punctuation.definition.tag.begin.html}
    '2': {name: entity.name.tag.other.html}
  end: (>)
  endCaptures:
    '1': {name: punctuation.definition.tag.end.html}
  patterns:
  - include: '#tag-stuff'

- name: invalid.illegal.incomplete.html
  match: <>

- name: invalid.illegal.bad-angle-bracket.html
  match: <

repository:
  comments:
    patterns:
    - begin: \{\{\!
      end: \}\}
      captures:
        '0':
          name: punctuation.definition.comment.html
      name: comment.block.xtpl
      patterns:
      - match: '@\w*'
        name: string.other.comment.xtpl
    - begin: ^([ \t]+)?\/\/
      captures:
        '0':
          name: punctuation.definition.comment.html
      end: ([\t\n])\s*
      name: comment.block.xtpl
    - begin: \/\*
      captures:
        '0':
          name: punctuation.definition.comment.html
      end: \*\/\s*
      name: comment.block.xtpl
  block_helper:
    begin: (\{\{~?)(\#[-a-zA-Z0-9_\./]+)\s*(?:(?:\()([^\)]+)(?:\)))?\s*
    beginCaptures:
      '1':
        name: support.constant.xtpl
      '2':
        name: support.function.xtpl
      '3':
        name: support.variable.xtpl
    end: (~?\}\})
    endCaptures:
      '1':
        name: support.constant.xtpl
    name: meta.function.block.start.xtpl
    patterns:
    - include: '#string-single-quoted'
    - include: '#string-double-quoted'
  end_block:
    begin: (\{\{~?)(/[a-zA-Z0-9_\.-]+)\s*
    beginCaptures:
      '1':
        name: support.constant.xtpl
      '2':
        name: support.function.xtpl
    end: (~?\}\})
    endCaptures:
      '1':
        name: support.constant.xtpl
    name: meta.function.block.end.xtpl
  partial_and_var:
    begin: (\{\{~?(?!\!)\{*(>|!<)*)\s*(\/[-_a-zA-Z0-9\.]+|(?:else|elseif|include|extend|block|tms|set|vmcommon)\b)?([-_a-zA-Z0-9\.]+)?\s*(?:(?:\()([^\)]+)(?:\)))?\s*
    beginCaptures:
      '1':
        name: support.constant.xtpl
      '3':
        name: support.function.xtpl
      '4':
        name: variable.parameter.xtpl
      '5':
        name: variable.parameter.xtpl
    end: (~?\}\}\}*)
    endCaptures:
      '1':
        name: support.constant.xtpl
    name: meta.function.inline.other.xtpl
    patterns:
    - include: '#string-single-quoted'
    - include: '#string-double-quoted'
  embedded-code:
    patterns:
    - include: '#ruby'
    - include: '#php'
    - include: '#smarty'
    - include: '#python'

  entities:
    patterns:
    - name: constant.character.entity.html
      match: (&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)
      captures:
        '1': {name: punctuation.definition.entity.html}
        '3': {name: punctuation.definition.entity.html}
    - name: invalid.illegal.bad-ampersand.html
      match: '&'

  php:
    begin: (?=(^\s*)?<\?)
    end: (?!(^\s*)?<\?)
    patterns:
    - include: source.php

  python:
    name: source.python.embedded.html
    begin: (?:^\s*)<\?python(?!.*\?>)
    end: \?>(?:\s*$\n)?
    patterns:
    - include: source.python

  ruby:
    patterns:
    - name: comment.block.erb
      begin: <%+#
      end: '%>'
      captures:
        '0': {name: punctuation.definition.comment.erb}
    - name: source.ruby.embedded.html
      begin: <%+(?!>)=?
      end: -?%>
      captures:
        '0': {name: punctuation.section.embedded.ruby}
      patterns:
      - name: comment.line.number-sign.ruby
        match: (#).*?(?=-?%>)
        captures:
          '1': {name: punctuation.definition.comment.ruby}
      - include: source.ruby
    - name: source.ruby.nitro.embedded.html
      begin: <\?r(?!>)=?
      end: -?\?>
      captures:
        '0': {name: punctuation.section.embedded.ruby.nitro}
      patterns:
      - name: comment.line.number-sign.ruby.nitro
        match: (#).*?(?=-?\?>)
        captures:
          '1': {name: punctuation.definition.comment.ruby.nitro}
      - include: source.ruby

  smarty:
    patterns:
    - begin: (\{(literal)\})
      end: (\{/(literal)\})
      captures:
        '1': {name: source.smarty.embedded.html}
        '2': {name: support.function.built-in.smarty}
    - name: source.smarty.embedded.html
      begin: '{{|{'
      end: '}}|}'
      patterns:
      - include: source.smarty
      disabled: 1

  string-double-quoted:
    name: string.quoted.double.html
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.html}
    end: '"'
    endCaptures:
      '0': {name: punctuation.definition.string.end.html}
    patterns:
    - include: '#embedded-code'
    - include: '#entities'

  string-single-quoted:
    name: string.quoted.single.html
    begin: "'"
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.html}
    end: "'"
    endCaptures:
      '0': {name: punctuation.definition.string.end.html}
    patterns:
    - include: '#embedded-code'
    - include: '#entities'

  tag-generic-attribute:
    name: entity.other.attribute-name.html
    match: \b([a-zA-Z\-:]+)

  tag-id-attribute:
    name: meta.attribute-with-value.id.html
    begin: \b(id)\b\s*(=)
    end: (?<='|")
    captures:
      '1': {name: entity.other.attribute-name.id.html}
      '2': {name: punctuation.separator.key-value.html}
    patterns:
    - name: string.quoted.double.html
      contentName: meta.toc-list.id.html
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.html}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end.html}
      patterns:
      - include: '#embedded-code'
      - include: '#entities'
    - name: string.quoted.single.html
      contentName: meta.toc-list.id.html
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.html}
      end: "'"
      endCaptures:
        '0': {name: punctuation.definition.string.end.html}
      patterns:
      - include: '#embedded-code'
      - include: '#entities'

  tag-stuff:
    patterns:
    - include: '#comments'
    - include: '#block_helper'
    - include: '#end_block'
    - include: '#partial_and_var'
    - include: '#tag-id-attribute'
    - include: '#tag-generic-attribute'
    - include: '#string-double-quoted'
    - include: '#string-single-quoted'
    - include: '#embedded-code'
firstLineMatch: <!DOCTYPE|doctype|<(?i:html)|<\?(?i:php)
foldingStartMarker: "(?x)\n\t\t(<(?i:a|article|aside|audio|blockquote|body|canvas|datalist|details|div|dl|fieldset|figcaption|figure|footer|form|head|header|hgroup|li|mark|meter|nav|ol|output|p|progress|rp|rt|ruby|script|section|select|small|style|summary|table|tbody|tfoot|thead|time|tr|ul|video)\\\
  b.*?>\n\t\t|<!--(?!.*--\\s*>)\n\t\t|^<!--\\ \\#tminclude\\ (?>.*?-->)$\n\t\t|<\\\
  ?(?:php)?.*\\b(if|for(each)?|while)\\b.+:\n\t\t|\\{\\{?(if|foreach|capture|literal|foreach|php|section|strip)\n\
  \t\t|\\{\\s*($|\\?>\\s*$|//|/\\*(.*\\*/\\s*$|(?!.*?\\*/)))\n\t\t)"
foldingStopMarker: "(?x)\n\t\t(</(?i:a|article|aside|audio|blockquote|body|canvas|datalist|details|div|dl|fieldset|figcaption|figure|footer|form|head|header|hgroup|li|mark|meter|nav|ol|output|p|progress|rp|rt|ruby|script|section|select|small|style|summary|table|tbody|tfoot|thead|time|tr|ul|video)>\n\
  \t\t|^(?!.*?<!--).*?--\\s*>\n\t\t|^<!--\\ end\\ tminclude\\ -->$\n\t\t|<\\?(?:php)?.*\\\
  bend(if|for(each)?|while)\\b\n\t\t|\\{\\{?/(if|foreach|capture|literal|foreach|php|section|strip)\n\
  \t\t|^[^{]*\\}\n\t\t)"
keyEquivalent: ^~H